ドットは『○○～の○○』



let = 変数　イメージとしては何かを出し入れする為の箱
const = 定数　一度入れたデータは入れ替えられない箱

a===b　…aとbが等しい　a!==b …aとbが異なる

if else もし○○なら●●を行う、そうでなければ□□を行う　

&&　かつ　.  ||　または


while 反復　　　for (変数の定義;条件式;変数の更新) 反復


配列→（　[  ,  , ] コンマで区切る
　　　　　インデックス番号が割り振られる、左から0.1.2.3の順番
　　　　　配列.length 配列の要素数(数)を取得、表示する事ができる　）

オブジェクト　{プロパティ1: 値1, プロパティ2: 値2}　のように表示する

テンプレートリテラル　文字列と定数を表示する際は、　(` ${  }  `)→``で囲う　この際" "では無い

const 『定義名』= function(){ } 関数を定義する
アロー関数 function = ()=>
　　　関数とは、何かを入れると何かを計算して何かを返してくれるプログラムの部品である。
　　　一般的には、入力を受けて処理を行い、その結果として出力がある。
　　　　　　　入れる→『関数』
　　　　　　出てくる←　　　　　入れる『引数』、出てくる『戻り値』
　　　関数の中で定義した定数はその関数の中でしか使うことはできない(スコープ)



return　『戻り値』　呼び出し元で値を受け取れるようになる

class 	『クラス』　インスタンス　『new クラス();』
        ( 設計図 )　　(実体)
　　　　
　　　　コンストラクタ　constructor() { }　クラスの中身
　　　　「this.プロパティ = 値」　インスタンスにプロバティと値を追加できる
　　　　メソッド　設計図の中の関数(?)

　　　　『継承』 extends   (例)class 子クラス　extends 親クラス　
　　　　
　　　　　オーバーライドに関して調べる、コンストラクタの呼び出し(?)constructor(){super()  }


『ファイルの分割』　コードは複数のファイルに分けて管理する事が出来る、しかしそれぞれのファイルを関連づけし、必要な値を渡さ
　　　　　　　　なければならない。

『export default クラス名　;　』　  → 他のファイルでも使用できるようになる設定
　export {  };　　　　→複数の定数をまとめて送信できる


『import クラス名　from "./ファイル名";』 →　読み込み

                インポート・・データを入れて使えるようにすること　受信
                エクスポート・・データを出して保存したりすること　送信

パッケージ　外部から作成されたクラスをパッケージとしてインポートする事が出来る

pushメソッド　配列の最後に新しい要素を追加するメソッド　『(定数名).push( 追加したい要素 );』
forEachメソッド　配列の中の要素を1つずつ取り出して、全ての要素に繰り返し同じ処理を行うメソッド　『配列.forEach((引数)=>{処理});』
                 コールバック関数



